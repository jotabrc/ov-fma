version: "3.9"

networks:
  app-network:
    driver: overlay

volumes:
  auth-data:
  user-data:
  gateway-data:
  finance-data:
  redis-data:

services:
  redis-cache:
    image: redis:8.0.1-alpine
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: admin
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == database
      restart_policy:
        condition: on-failure


  finance-postgres-sql:
    depends_on:
      - kafka-1
      - gateway-service
    image: postgres:alpine
    volumes:
      - finance-data:/var/lib/postgresql/data
    env_file:
      - ./ov-fma-finance/.env.postgres
    ports:
      - "5433:5432"
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == database
      restart_policy:
        condition: on-failure

  user-postgres-sql:
    depends_on:
      - kafka-1
      - gateway-service
    image: postgres:alpine
    volumes:
      - user-data:/var/lib/postgresql/data
    env_file:
      - ./ov-fma-user/.env.postgres
    ports:
      - "5434:5432"
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == database
      restart_policy:
        condition: on-failure

  auth-postgres-sql:
    depends_on:
      - kafka-1
      - gateway-service
    image: postgres:alpine
    volumes:
      - auth-data:/var/lib/postgresql/data
    env_file:
      - ./ov-fma-auth/.env.postgres
    ports:
      - "5435:5432"
    networks:
      - app-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == database
      restart_policy:
        condition: on-failure

  finance-service:
    depends_on:
      - kafka-1
      - finance-postgres-sql
      - gateway-service
    build:
      context: ./ov-fma-finance
      dockerfile: .dockerfile
    image: jotabr092/ov-fma-finance
    env_file:
      - ./ov-fma-finance/.env
      - ./ov-fma-finance/.env.postgres
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8083:8080"
    networks:
      - app-network

  auth-service:
    depends_on:
      - kafka-1
      - auth-postgres-sql
      - gateway-service
    build:
      context: ./ov-fma-auth
      dockerfile: .dockerfile
    image: jotabr092/ov-fma-auth
    env_file:
      - ./ov-fma-auth/.env
      - ./ov-fma-auth/.env.postgres
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8082:8080"
    networks:
      - app-network

  user-service:
    depends_on:
      - kafka-1
      - user-postgres-sql
      - redis-cache
      - gateway-service
    build:
      context: ./ov-fma-user
      dockerfile: .dockerfile
    image: jotabr092/ov-fma-user
    env_file:
      - ./ov-fma-user/.env
      - ./ov-fma-user/.env.postgres
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8081:8080"
    networks:
      - app-network

  gateway-service:
    depends_on:
      - kafka-1
    build:
      context: ./ov-fma-gateway
      dockerfile: .dockerfile
    image: jotabr092/ov-fma-gateway
    env_file:
      - ./ov-fma-gateway/.env
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka-1:
    build:
      context: ./kafka
      dockerfile: .dockerfile
    image: jotabr092/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092, PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname != database
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
    ports:
      - "9092:9092"
    networks:
      - app-network
